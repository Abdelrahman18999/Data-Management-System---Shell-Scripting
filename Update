#!/bin/bash

echo -e "List of Tables:"
counter=1
for file in *; do
    if [ -f "$file" ] && [[ ! "$file" =~ _metadata$ ]]; then
        echo -e "${COLOR_GREEN} $counter. $file ${COLOR_RESET}"
        ((counter++))
    fi
done



while true; do
    read -p "Enter table name: " table

    if [[ -f "$table" ]]; then
        metadata_table="${table}_metadata"
        number_of_fields=$(awk -F: 'NR==1 {print NF}' "$metadata_table")

        select sub_operation in "Update by column" "Update by Value" "Back to operations"; do
            case $REPLY in
            1)
 		while true; do

                    awk -F: 'NR==1 {for(i=1; i<=NF; i++) print i, $i}' "$metadata_table"
		    read -p "Here are your columns, Please choose column number: " column_number
		        column_name=$(awk -F: -v var="$column_number" 'NR==1 {print $var}' "$metadata_table")
		       datatype=$(awk -F: -v var="$column_number" 'NR==2 {print $var}' "$metadata_table")
		       constraint=$(awk -F: -v var="$column_number" 'NR==3 {print $var}' "$metadata_table")
			while true; do
		read -p "Please enter $column_name [$datatype] [$constraint]: " value

		 # Check if constraint is notnull
                if [[ "$constraint" == "notnull" && -z "$value" ]]; then
                    echo "Error: $column_name cannot be null."
                    continue  # Continue the loop to get correct input
                fi

			# Check if datatype is string
                if [[ "$datatype" == "string" && ! "$value" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then
                    echo "Please enter a $datatype value free of special characters, spaces and not begin with numbers!"
                    continue 
                # Check if datatype is integer
                elif [[ "$datatype" == "int" && ! "$value" =~ ^[0-9]*$ ]]; then
                    echo "Please enter a $datatype value free of special characters and spaces !"
                    continue	
                fi

		if [[ "$constraint" == "unique" || "$constraint" == "pk"  ]]; then
		echo "Update by column is not allowed for this column constrain"
		break
		fi


		break
		done


		    if [[ $column_number -gt $number_of_fields || $column_number -lt 1 ]]; then
			echo "Please enter a column number between 1 and $number_of_fields."
		    else
			awk -v col_num="$column_number" -v new_val="$value" -F: '
			    { $col_num = new_val }
			    { for(i=1; i<=NF; i++) printf "%s%s", $i, (i==NF) ? "\n" : ":" }
			' "$table" > "$table.tmp" && mv "$table.tmp" "$table"
			break
		    fi
		done
                ;;
            2)
			    while true; do
                  	    awk -F: 'NR==1 {for(i=1; i<=NF; i++) print i, $i}' "$metadata_table"
			PK_index=$(awk -F':' 'NR==3 {for(i=1; i<=NF; i++) if($i=="pk") print i}' "$metadata_table")
			PK_column_name=$(awk -F: -v var="$PK_index" 'NR==1 {print $var}' "$metadata_table")
		       PK_datatype=$(awk -F: -v var="$column_number" 'NR==2 {print $var}' "$metadata_table")
			    read -p "Choose column number to be updated: " column_number1 #set	
			Target_column=$(awk -F: -v var="$column_number1" 'NR==1 {print $var}' "$metadata_table")
		       Target_datatype=$(awk -F: -v var="$column_number1" 'NR==2 {print $var}' "$metadata_table")
		       Target_constraint=$(awk -F: -v var="$column_number1" 'NR==3 {print $var}' "$metadata_table")

		   	while true; do
			    read -p "Set $Target_column = " new_value 
			if [[ "$Target_datatype" == "string" && ! "$value" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then
                    echo "Please enter a $datatype value free of special characters, spaces and not begin with numbers!"
                    continue 
                # Check if datatype is integer
                elif [[ "$Target_datatype" == "int" && ! "$new_value" =~ ^[0-9]*$ ]]; then
                    echo "Please enter a $Target_datatype value free of special characters and spaces !"
                    continue	
                fi

		if [[ "$Target_constraint" == "unique" ]]; then
		 # Use awk to check if the value already exists in the data file
		    flag=$(awk -F: -v col_num="$column_number1" -v search_value="$new_value" '
		    BEGIN {
			flag="true"
		    }
		    {
			if ($col_num == search_value) {
			    flag="false"
			    exit
			}
		    }
		    END {
			print flag
		    }' "$table")

		    if [ "$flag" == true ]; then
			#echo "$column_name is a valid unique."
			break  # Break out of the loop as the value is correct
		    else
			echo "Error: $column_name must be unique, and the provided value already exists."
			continue  # Continue the loop to get the correct input
		    fi
		fi

		 # Check if constraint is notnull
                if [[ "$constraint" == "notnull" && -z "$new_value" ]]; then
                    echo "Error: $column_name cannot be null."
                    continue  # Continue the loop to get correct input
                fi

		break
		done
			    while true; do 

			    read -p "where [PK] $PK_column_name = " match_value
			    if [[ "$PK_datatype" == "string" && ! "$value" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then
                    echo "Please enter a $datatype value free of special characters, spaces and not begin with numbers!"
		            continue 
		        # Check if datatype is integer
		            elif [[ "$PK_datatype" == "int" && ! "$match_value" =~ ^[0-9]*$ ]]; then
				    echo "Please enter a $PK_datatype value free of special characters and spaces !"
				    continue	
		        	fi
			flag1=$(awk -F: -v col_num="$PK_index" -v search_value="$match_value" '
			    BEGIN {
				flag="false"
			    }
			    {
				if ($col_num == search_value) {
				    flag="true"
				    exit
				}
			    }
			    END {
				print flag
			    }' "$table")
			echo "$flag1"

			if [[ "$flag1" == "false" ]]; then
			echo " this value is not exist,Please renter "
			continue
			else 
			break
			fi
			    done 
				

			    if [[ $column_number1 -gt $number_of_fields || $column_number1 -lt 1 ]]; then
				echo "Please enter valid column numbers between 1 and $number_of_fields."
			    else
			awk -v match_val="$match_value" -v pk_ind="$PK_index" -v col_num1="$column_number1" -v new_val="$new_value" -F: '
				    $pk_ind == match_val {
					$col_num1 = new_val
				    }
				    { for(i=1; i<=NF; i++) printf "%s%s", $i, (i==NF) ? "\n" : ":" }
				' "$table" > "$table.tmp" && mv "$table.tmp" "$table"
				break
			    fi
			done

                ;;
            3)
		break
		;;

            *)
                echo "Please choose an option from the list"
                ;;
            esac
        done
    else
        echo "Table does not exist"
    fi
break
done

